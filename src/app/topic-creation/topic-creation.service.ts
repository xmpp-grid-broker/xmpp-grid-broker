import {Injectable} from '@angular/core';
import {XmppService} from '../core/xmpp/xmpp.service';
import {JID} from 'xmpp-jid';

export enum TopicCreationErrors {
  FeatureNotImplemented = 'feature-not-implemented',
  RegistrationRequired = 'registration-required',
  Forbidden = 'forbidden',
  Conflict = 'conflict',
  NodeIdRequired = 'nodeid-required'
}

@Injectable()
export class TopicCreationService {
  constructor(private xmppService: XmppService) {
  }

  createTopic(topicIdentifier: string): Promise<string> {
    return Promise.all([this.xmppService.getClient(), this.xmppService.pubSubJid])
      .then(([client, pubSubJid]) => this._createService(topicIdentifier, client, pubSubJid));
  }

  private _createService(topicIdentifier: any, client: any, pubSubJid: JID): Promise<string> {
    return new Promise((resolve, reject) => {
      if (!topicIdentifier) {
        topicIdentifier = true;
      }

      client.createNode(pubSubJid, topicIdentifier, {}, (err, result) => {
        if (err) {
          reject(err.error);
        } else if (result.pubsub) {
          // If the service returns a nodeID (generated by the server)
          resolve(result.pubsub.create);
        } else {
          resolve(topicIdentifier);
        }
      });
    });
  }


}
